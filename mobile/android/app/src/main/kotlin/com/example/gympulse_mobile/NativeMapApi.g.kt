// Autogenerated from Pigeon (v17.3.0), do not edit directly.
// See also: https://pub.dev/packages/pigeon


import android.util.Log
import io.flutter.plugin.common.BasicMessageChannel
import io.flutter.plugin.common.BinaryMessenger
import io.flutter.plugin.common.MessageCodec
import io.flutter.plugin.common.StandardMessageCodec
import java.io.ByteArrayOutputStream
import java.nio.ByteBuffer

private fun wrapResult(result: Any?): List<Any?> {
  return listOf(result)
}

private fun wrapError(exception: Throwable): List<Any?> {
  if (exception is FlutterError) {
    return listOf(
      exception.code,
      exception.message,
      exception.details
    )
  } else {
    return listOf(
      exception.javaClass.simpleName,
      exception.toString(),
      "Cause: " + exception.cause + ", Stacktrace: " + Log.getStackTraceString(exception)
    )
  }
}

private fun createConnectionError(channelName: String): FlutterError {
  return FlutterError("channel-error",  "Unable to establish connection on channel: '$channelName'.", "")}

/**
 * Error class for passing custom error details to Flutter via a thrown PlatformException.
 * @property code The error code.
 * @property message The error message.
 * @property details The error details. Must be a datatype supported by the api codec.
 */
class FlutterError (
  val code: String,
  override val message: String? = null,
  val details: Any? = null
) : Throwable()

/** Marker color options */
enum class MarkerColor(val raw: Int) {
  RED(0),
  GREEN(1),
  BLUE(2),
  ORANGE(3),
  PURPLE(4);

  companion object {
    fun ofRaw(raw: Int): MarkerColor? {
      return values().firstOrNull { it.raw == raw }
    }
  }
}

/**
 * Represents a coordinate with latitude and longitude
 *
 * Generated class from Pigeon that represents data sent in messages.
 */
data class PigeonLatLng (
  val latitude: Double,
  val longitude: Double

) {
  companion object {
    @Suppress("UNCHECKED_CAST")
    fun fromList(list: List<Any?>): PigeonLatLng {
      val latitude = list[0] as Double
      val longitude = list[1] as Double
      return PigeonLatLng(latitude, longitude)
    }
  }
  fun toList(): List<Any?> {
    return listOf<Any?>(
      latitude,
      longitude,
    )
  }
}

/**
 * Represents a map marker
 *
 * Generated class from Pigeon that represents data sent in messages.
 */
data class PigeonMarker (
  val id: String,
  val position: PigeonLatLng,
  val title: String? = null,
  val snippet: String? = null,
  val color: MarkerColor

) {
  companion object {
    @Suppress("UNCHECKED_CAST")
    fun fromList(list: List<Any?>): PigeonMarker {
      val id = list[0] as String
      val position = PigeonLatLng.fromList(list[1] as List<Any?>)
      val title = list[2] as String?
      val snippet = list[3] as String?
      val color = MarkerColor.ofRaw(list[4] as Int)!!
      return PigeonMarker(id, position, title, snippet, color)
    }
  }
  fun toList(): List<Any?> {
    return listOf<Any?>(
      id,
      position.toList(),
      title,
      snippet,
      color.raw,
    )
  }
}

/**
 * Camera position for the map
 *
 * Generated class from Pigeon that represents data sent in messages.
 */
data class PigeonCameraPosition (
  val target: PigeonLatLng,
  val zoom: Double

) {
  companion object {
    @Suppress("UNCHECKED_CAST")
    fun fromList(list: List<Any?>): PigeonCameraPosition {
      val target = PigeonLatLng.fromList(list[0] as List<Any?>)
      val zoom = list[1] as Double
      return PigeonCameraPosition(target, zoom)
    }
  }
  fun toList(): List<Any?> {
    return listOf<Any?>(
      target.toList(),
      zoom,
    )
  }
}

/**
 * Represents the bounds for fitting markers
 *
 * Generated class from Pigeon that represents data sent in messages.
 */
data class PigeonLatLngBounds (
  val southwest: PigeonLatLng,
  val northeast: PigeonLatLng

) {
  companion object {
    @Suppress("UNCHECKED_CAST")
    fun fromList(list: List<Any?>): PigeonLatLngBounds {
      val southwest = PigeonLatLng.fromList(list[0] as List<Any?>)
      val northeast = PigeonLatLng.fromList(list[1] as List<Any?>)
      return PigeonLatLngBounds(southwest, northeast)
    }
  }
  fun toList(): List<Any?> {
    return listOf<Any?>(
      southwest.toList(),
      northeast.toList(),
    )
  }
}
@Suppress("UNCHECKED_CAST")
private object NativeMapApiCodec : StandardMessageCodec() {
  override fun readValueOfType(type: Byte, buffer: ByteBuffer): Any? {
    return when (type) {
      128.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          PigeonCameraPosition.fromList(it)
        }
      }
      129.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          PigeonLatLng.fromList(it)
        }
      }
      130.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          PigeonLatLngBounds.fromList(it)
        }
      }
      131.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          PigeonMarker.fromList(it)
        }
      }
      else -> super.readValueOfType(type, buffer)
    }
  }
  override fun writeValue(stream: ByteArrayOutputStream, value: Any?)   {
    when (value) {
      is PigeonCameraPosition -> {
        stream.write(128)
        writeValue(stream, value.toList())
      }
      is PigeonLatLng -> {
        stream.write(129)
        writeValue(stream, value.toList())
      }
      is PigeonLatLngBounds -> {
        stream.write(130)
        writeValue(stream, value.toList())
      }
      is PigeonMarker -> {
        stream.write(131)
        writeValue(stream, value.toList())
      }
      else -> super.writeValue(stream, value)
    }
  }
}

/**
 * Host API - Flutter to Native
 *
 * Generated interface from Pigeon that represents a handler of messages from Flutter.
 */
interface NativeMapApi {
  /** Initialize the native map view */
  fun initializeMap()
  /** Set markers on the map */
  fun setMarkers(markers: List<PigeonMarker>)
  /** Move camera to position */
  fun moveCamera(position: PigeonCameraPosition)
  /** Fit camera to bounds */
  fun fitToBounds(bounds: PigeonLatLngBounds, padding: Double)
  /** Show/hide user location */
  fun setUserLocationEnabled(enabled: Boolean)
  /** Set map type (normal, satellite, hybrid) */
  fun setMapType(mapType: String)

  companion object {
    /** The codec used by NativeMapApi. */
    val codec: MessageCodec<Any?> by lazy {
      NativeMapApiCodec
    }
    /** Sets up an instance of `NativeMapApi` to handle messages through the `binaryMessenger`. */
    @Suppress("UNCHECKED_CAST")
    fun setUp(binaryMessenger: BinaryMessenger, api: NativeMapApi?) {
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.gympulse_mobile.NativeMapApi.initializeMap", codec)
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            var wrapped: List<Any?>
            try {
              api.initializeMap()
              wrapped = listOf<Any?>(null)
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.gympulse_mobile.NativeMapApi.setMarkers", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val markersArg = args[0] as List<PigeonMarker>
            var wrapped: List<Any?>
            try {
              api.setMarkers(markersArg)
              wrapped = listOf<Any?>(null)
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.gympulse_mobile.NativeMapApi.moveCamera", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val positionArg = args[0] as PigeonCameraPosition
            var wrapped: List<Any?>
            try {
              api.moveCamera(positionArg)
              wrapped = listOf<Any?>(null)
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.gympulse_mobile.NativeMapApi.fitToBounds", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val boundsArg = args[0] as PigeonLatLngBounds
            val paddingArg = args[1] as Double
            var wrapped: List<Any?>
            try {
              api.fitToBounds(boundsArg, paddingArg)
              wrapped = listOf<Any?>(null)
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.gympulse_mobile.NativeMapApi.setUserLocationEnabled", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val enabledArg = args[0] as Boolean
            var wrapped: List<Any?>
            try {
              api.setUserLocationEnabled(enabledArg)
              wrapped = listOf<Any?>(null)
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.gympulse_mobile.NativeMapApi.setMapType", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val mapTypeArg = args[0] as String
            var wrapped: List<Any?>
            try {
              api.setMapType(mapTypeArg)
              wrapped = listOf<Any?>(null)
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
    }
  }
}
@Suppress("UNCHECKED_CAST")
private object NativeMapFlutterApiCodec : StandardMessageCodec() {
  override fun readValueOfType(type: Byte, buffer: ByteBuffer): Any? {
    return when (type) {
      128.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          PigeonCameraPosition.fromList(it)
        }
      }
      129.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          PigeonLatLng.fromList(it)
        }
      }
      else -> super.readValueOfType(type, buffer)
    }
  }
  override fun writeValue(stream: ByteArrayOutputStream, value: Any?)   {
    when (value) {
      is PigeonCameraPosition -> {
        stream.write(128)
        writeValue(stream, value.toList())
      }
      is PigeonLatLng -> {
        stream.write(129)
        writeValue(stream, value.toList())
      }
      else -> super.writeValue(stream, value)
    }
  }
}

/**
 * Flutter API - Native to Flutter
 *
 * Generated class from Pigeon that represents Flutter messages that can be called from Kotlin.
 */
@Suppress("UNCHECKED_CAST")
class NativeMapFlutterApi(private val binaryMessenger: BinaryMessenger) {
  companion object {
    /** The codec used by NativeMapFlutterApi. */
    val codec: MessageCodec<Any?> by lazy {
      NativeMapFlutterApiCodec
    }
  }
  /** Called when a marker is tapped */
  fun onMarkerTapped(markerIdArg: String, callback: (Result<Unit>) -> Unit)
{
    val channelName = "dev.flutter.pigeon.gympulse_mobile.NativeMapFlutterApi.onMarkerTapped"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(markerIdArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(FlutterError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(createConnectionError(channelName)))
      } 
    }
  }
  /** Called when the map is tapped */
  fun onMapTapped(positionArg: PigeonLatLng, callback: (Result<Unit>) -> Unit)
{
    val channelName = "dev.flutter.pigeon.gympulse_mobile.NativeMapFlutterApi.onMapTapped"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(positionArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(FlutterError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(createConnectionError(channelName)))
      } 
    }
  }
  /** Called when the camera position changes */
  fun onCameraPositionChanged(positionArg: PigeonCameraPosition, callback: (Result<Unit>) -> Unit)
{
    val channelName = "dev.flutter.pigeon.gympulse_mobile.NativeMapFlutterApi.onCameraPositionChanged"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(positionArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(FlutterError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(createConnectionError(channelName)))
      } 
    }
  }
  /** Called when the map is ready */
  fun onMapReady(callback: (Result<Unit>) -> Unit)
{
    val channelName = "dev.flutter.pigeon.gympulse_mobile.NativeMapFlutterApi.onMapReady"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(null) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(FlutterError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(createConnectionError(channelName)))
      } 
    }
  }
}
